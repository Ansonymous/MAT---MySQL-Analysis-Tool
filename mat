#!/usr/bin/python2.7

'''
MySQL Analysis Tool

MAT is a simple tool that created by Python language which used to analyze MySQL directory files. It is able to create image file for entire MySQL directory and analyze the log files from the image. This tool provides fastest and easiest way to analyze MySQL database to find out which data had been modified, inserted or deleted after an attack.

Version 1.4, may contain several bugs and lack of features. 

Contributed by Anson Tan
'''

import os
import sys
import fileinput
import hashlib

#command list
def man():
	
	os.system('more /usr/bin/man')
	forensic(result)
		
#command line
def forensic(result):

	output = ""
	#input command line
	option = raw_input("\nmat > ")

	#show binary file	
	if option == 'show binary' or option == 's binary' or option == 's bin':
	
		os.system('ls -l 2>/dev/null | find /usr/bin/MAT/ -type d | cut -d"/" -f5 | uniq')
		imagename = raw_input('\nEnter image file : ')

		#accept binary file name from user input
		os.system('ls -l 2>/dev/null  | find /usr/bin/MAT/' + imagename + ' -type f -name "mysql*" | cut -d"/" -f6 | uniq')
		binaryfile = raw_input('\nEnter binary file name: ')
		#read binary file
		os.system('mysqlbinlog /usr/bin/MAT/' + imagename + '/' + binaryfile)
		result = 'mysqlbinlog /usr/bin/MAT/' + imagename + '/' + binaryfile
		forensic(result)

	#show log files
	elif option == 'show log' or option == 's log':

		os.system('ls -l 2>/dev/null | find /usr/bin/MAT/ -type d | cut -d"/" -f5 | uniq')
		imagename = raw_input('\nEnter image file : ')
		
		#show log files
		os.system("ls -la /usr/bin/MAT/" + imagename)
		result = 'ls -la /usr/bin/MAT/' + imagename
		forensic(result)

	#show MySQL history
	elif option == 'show history' or option == 's history' or option == 's his':

		#show MySQL history
		os.system('cat ~/.mysql_history')
		result = 'cat ~/.mysql_history'
		forensic(result)

	#show tables
	elif option == 'show tables' or option == 's t' or option == 's tables' or option == 's table':
		os.system('ls -l 2>/dev/null | find /usr/bin/MAT/ -type d | cut -d"/" -f5 | uniq')
		imagename = raw_input('\nEnter image file : ')
		
		os.system('find /usr/bin/MAT/' + imagename + ' -type f -name "*.frm" 2>/dev/null')
		result = 'find /usr/bin/MAT/' + imagename + ' -type f -name "*.frm" 2>/dev/null'
		forensic(result)

	#show databases and number of tables
	elif option == 'show databases' or option == 's db' or option == 's database' or option == 's databases':


		os.system('ls -l 2>/dev/null | find /usr/bin/MAT/ -type d | cut -d"/" -f5 | uniq')
		imagename = raw_input('\nEnter image file : ')

		os.system('find /usr/bin/MAT/' + imagename + ' -type f -name "*.frm" 2>/dev/null | cut -d"/" -f6 | sort | uniq -c | sort -nr')
		result = 'find /usr/bin/MAT/' + imagename + ' -type f -name "*.frm" 2>/dev/null | cut -d"/" -f6 | sort | uniq -c | sort -nr'
		forensic(result)

	#show error log
	elif option == 'show error' or option == 's error' or option == 's err':

		os.system('ls -l 2>/dev/null | find /usr/bin/MAT/ -type d | cut -d"/" -f5 | uniq')
		imagename = raw_input('\nEnter image file : ')

		print '\nError Log\n'
		os.system('cat /usr/bin/MAT/' + imagename + '/error.log')
		result = 'cat /usr/bin/MAT/' + imagename + '/error.log'
		forensic(result)

	#detect mysql directory
	elif option == 'detect mysql' or option == 'det mysql':

		os.system('ls -l /var/log/mysql')
		result = 'ls -l /var/log/mysql'
		forensic(result)

	#show general query file
	elif option == 'show query' or option == 's query' or option == 's que':

		os.system('ls -l 2>/dev/null | find /usr/bin/MAT/ -type d | cut -d"/" -f5 | uniq')
		imagename = raw_input('\nEnter image file : ')

		print '\nGeneral Query Log\n'
		os.system('cat /usr/bin/MAT/' + imagename + '/mysql.log')
		result = 'cat /usr/bin/MAT/' + imagename + '/mysql.log'
		forensic(result)

	#create mysql image file
	elif option == 'create image' or option == 'c image':

		con = raw_input("May takes a while to backup, type 'Y' to proceed or 'R' to return : ")
		if con == 'Y' or con == 'Yes' or con == 'y':
			imagename = raw_input("\nEnter image name : ")
			os.system('sudo mkisofs -o /usr/bin/MAT/' + imagename + '.iso' + ' /var/lib/mysql')
			print '\nMD5 Hash\n' + hashlib.md5(open('/usr/bin/MAT/' + imagename + '.iso', 'rb').read()).hexdigest()
			print imagename + ' is successfully created'
			forensic(result)

		elif con == 'R' or con == 'r' or con == 'return':
			forensic(result)
		else:
			print 'Invalid option'
			forensic(result)

	#mount mysql image file
	elif option == 'mount image' or option == 'm image':

		os.system('ls -l 2>/dev/null | find /usr/bin/MAT/ -type f | cut -d"/" -f5 | uniq')
		imagename = raw_input("\nEnter image name : ")
		os.system('sudo mkdir /usr/bin/MAT/' + imagename)
		os.system('sudo mount -o loop /usr/bin/MAT/' + imagename + '.iso' + ' /usr/bin/MAT/' + imagename)
		print '\nMD5 Hash\n' + hashlib.md5(open('/usr/bin/MAT/' + imagename + '.iso', 'rb').read()).hexdigest()
		print imagename + ' is successfully mounted'
		forensic(result)

	#unmount mysql image flle
	elif option == 'unmount image' or option == 'un image':

		os.system('ls -l 2>/dev/null | find /usr/bin/MAT/ -type d | cut -d"/" -f5 | uniq')
		imagename = raw_input("\nEnter image name : ")
		os.system('sudo umount /usr/bin/MAT/' + imagename)
		print imagename + ' is successfully unmounted'
		forensic(result)

	#calculate hash for Mysql image file using MD5
	elif option == 'hash image' or option == 'h image':
	
		os.system('ls -l 2>/dev/null | find /usr/bin/MAT/ -type f | cut -d"/" -f5 | uniq')
		imagename = raw_input("\nEnter image name : ")
		print '\nMD5 Hash\n' + hashlib.md5(open('/usr/bin/MAT/' + imagename + '.iso', 'rb').read()).hexdigest()
		forensic(result)

	#analyze binary file
	elif option == 'analyze binary' or option == 'ana bin' or option == 'an bin':

		os.system('ls -l 2>/dev/null | find /usr/bin/MAT/ -type d | cut -d"/" -f5 | uniq')
		imagename = raw_input("\nEnter image name : ")
		os.system('ls -l 2>/dev/null | find /usr/bin/MAT/' + imagename + ' -type f -name "mysql*" | cut -d"/" -f6 | uniq')
		#Accept binary file name
		filename = raw_input('\nEnter file name : ')
		output = imagename + '/' + filename
		#Open sum.sh but read only
		f1 = open('/usr/bin/sum.sh', 'r')
		#Open analyze.sh but write only
		f2 = open('/usr/bin/analyze.sh', 'w')
		for line in f1:
			#Copy all lines from sum.sh and replace user input into analyze.sh
			f2.write(line.replace('logfile', output))
		f1.close()
		f2.close()
		#Execute analyze.sh
		os.system('. /usr/bin/analyze.sh')
		result = '. /usr/bin/analyze.sh'
		forensic(result)

	#highest number of insert/delete/update statements
	elif option == 'num state':
		
		os.system('ls -l 2>/dev/null | find /usr/bin/MAT/ -type d | cut -d"/" -f5 | uniq')
		imagename = raw_input("\nEnter image name : ")
		os.system('ls -l 2>/dev/null | find /usr/bin/MAT/' + imagename + ' -type f -name "mysql*" | cut -d"/" -f6 | uniq')
		#Accept binary file name
		filename = raw_input('\nEnter file name : ')
		output = imagename + '/' + filename
		#Open sum.sh but read only
		f1 = open('/usr/bin/sum.sh', 'r')
		#Open analyze.sh but write only
		f2 = open('/usr/bin/analyze.sh', 'w')
		for line in f1:
			#Copy all lines from sum.sh and replace user input into analyze.sh
			f2.write(line.replace('logfile', output))
		f1.close()
		f2.close()
		#Execute analyze.sh
		os.system(". /usr/bin/analyze.sh | grep DELETE |cut -d':' -f2 | sort | uniq -c | sort -nr")
		print '\n'
		os.system(". /usr/bin/analyze.sh | grep INSERT |cut -d':' -f2 | sort | uniq -c | sort -nr")
		print '\n'
		os.system(". /usr/bin/analyze.sh | grep UPDATE |cut -d':' -f2 | sort | uniq -c | sort -nr")
		forensic(result)

	#mat command list and description
	elif option == 'man':

		man()
	
	#clear screen
	elif option == 'clear' or option == 'cl':

		os.system('clear')
		forensic(result)

	elif option == 'version':

		print 'MySQL Analysis Tool v1.4.1, contributed by Anson Tan'
		forensic(result)

	#exit program
	elif option == 'exit':

		sys.exit(1)

	#save output for binary file
	elif option == 'save output' or option == 'save out':
		#input filename for binary file output
		filename = raw_input("Enter filename for the output > ")
		os.system(result + '>' + filename + '.txt')
		print filename + ' is successfully saved'
		forensic(result)
	#return to forensic function after accepted invalid input
	else:
		print 'Invalid option'
		forensic(result)
		
#Display menu options
#Menu options

if (os.path.isdir("/usr/bin/MAT")) == 1:
	print '***********************************'
	print '*                MAT              *'
	print '*     MySQL Analysis Tool v1.4.1  *'
	print '***********************************'
else:
	os.system('sudo mkdir /usr/bin/MAT')
	print '***********************************'
	print '*                MAT              *'
	print '*     MySQL Analysis Tool v1.4.1  *'
	print '***********************************'

result = ""
forensic(result)
